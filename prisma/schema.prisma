// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String?        @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  enrolledCourses     Course[]       @relation("EnrolledCourses")
  createdCourses      Course[]       @relation("CreatedCourses")
  createdAnnouncement Announcement[] @relation("createdAnnouncement")
  Submission          Submission[]
  Material            Material[]
  Message             Message[]
  privateMessage      privateMessage[]
  Notes               Notes[]
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Material {
  id          String  @id @default(cuid())
  title       String
  description String?
  classId     String
  material    String
  creator     User    @relation(fields: [creatorId], references: [id])
  creatorId   String
  course      Course  @relation(fields: [classId], references: [id]) // Assuming a material can belong to multiple courses

  @@index([creatorId])
  @@index([classId])
}

model Announcement {
  id       String @id @default(cuid())
  courseId String

  course   Course @relation(fields: [courseId], references: [id])
  announce String
  author   User   @relation("createdAnnouncement", fields: [userId], references: [id])
  userId   String
  createdAt DateTime @default(now())

  @@index([courseId])
  @@index([userId])
}

model Course {
  id               String         @id @default(cuid())
  title            String
  description      String?
  section          String?
  class_code       String?        @unique
  creator          User           @relation("CreatedCourses", fields: [creatorId], references: [id])
  creatorId        String
  // Define relationships
  enrolledStudents User[]         @relation("EnrolledCourses")
  material         Material[]
  assignments      Assignment[]
  announcements    Announcement[] // Fix the model name to singular 'Announcement'
  messages         Message[]
  privateMessages  privateMessage[]

  @@index([creatorId])
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String?
  dueDate     String
  courseId    String
  marks String
  reference   String
  // Define relationships
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]

  @@index([courseId])
}

model Submission {
  id           String     @id @default(cuid())
  content      String?
  submittedAt  DateTime   @default(now())
  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  obtainedMarks String?

  @@index([assignmentId])
  @@index([studentId])
}

model Message {
  id       String   @id @default(cuid())
  message  String
  createdAt DateTime @default(now())
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  user     User     @relation(fields: [userId], references: [id])
  userId   String

  @@index([courseId])
  @@index([userId])
}

model privateMessage {
  id       String   @id @default(cuid())
  senderId String
  receiverId String
  message  String
  createdAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String

  @@index([userId])
  @@index([courseId])
}


model Notes {
  id String @id @default(cuid())
  content String?
  modifiedAt DateTime @default(now())
  userId   String
  User     User  @relation(fields: [userId], references: [id])
  title String?

  @@index([userId])
}
// model Course {
//   id         String  @id @default(cuid())
//   class_name String
//   section    String
//   subject    String
//   user String

//   // Add the field to store the userId in the Class model
// }
